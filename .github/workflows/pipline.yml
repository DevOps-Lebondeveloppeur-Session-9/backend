name: backend-pipeline

env:
    DOCKER_IMAGE_NAME: talel12/backend-session9

on:
    push:
        branches: [main]

jobs:
    unit-test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                    node-version: 18

            - name: check node version
              run: node -v

            - name: setup dependencies
              run: npm install
            
            - name: run unit tests
              run: npm run test

            - name: Notify Slack - Unit Tests
              uses: slackapi/slack-github-action@v2.1.0
              if: always()
              with:
                webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
                webhook-type: incoming-webhook
                payload: |
                  {
                    "text": ":test_tube: *Unit Tests* - ${{ job.status }}",
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": ":test_tube: *Unit Tests* - ${{ job.status }}"
                        }
                      },
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "*Repository*: <https://github.com/${{ github.repository }}|${{ github.repository }}>\n*Branch*: ${{ github.ref_name }}\n*Commit*: <${{ github.event.head_commit.url }}|${{
                            github.sha
                          }}>"
                        }
                      },
                      {
                        "type": "actions",
                        "elements": [
                          {
                            "type": "button",
                            "text": {
                              "type": "plain_text",
                              "text": "View Workflow",
                              "emoji": true
                            },
                            "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                          }
                        ]
                      }
                    ]
                  }

    sonarQube:
      name: SonarQube
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: SonarQube Scan
          uses: SonarSource/sonarqube-scan-action@v5
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            
        - name: Notify Slack - SonarQube
          uses: slackapi/slack-github-action@v2.1.0
          if: always()
          with:
            webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
            webhook-type: incoming-webhook
            payload: |
              {
                "text": ":mag: *SonarQube Scan* - ${{ job.status }}",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":mag: *SonarQube Scan* - ${{ job.status }}"
                    }
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": "Code quality and security analysis completed"
                      }
                    ]
                  }
                ]
              }

    gitleaks-secret-scan-job:
      runs-on: ubuntu-latest
      needs: [ sonarQube, unit-test]
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4

        - name: Run Gitleaks Scan
          uses: gitleaks/gitleaks-action@v2
          env:
            GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
        - name: Notify Slack - Secret Scan
          uses: slackapi/slack-github-action@v2.1.0
          if: always()
          with:
            webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
            webhook-type: incoming-webhook
            payload: |
              {
                "text": ":detective: *Secret Scan* - ${{ job.status }}",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":detective: *Secret Scan* - ${{ job.status }}"
                    }
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": "Checked for accidentally committed secrets"
                      }
                    ]
                  }
                ]
              }

    trivy-image-security-scan-job:
      runs-on: ubuntu-latest
      needs: [ sonarQube, unit-test]
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4

        - name: Install dependencies
          run: sudo apt-get update && sudo apt-get install -y curl

        - name: Download and install Trivy
          run: |
            curl -sSL https://github.com/aquasecurity/trivy/releases/download/v0.29.0/trivy_0.29.0_Linux-64bit.tar.gz -o trivy.tar.gz
            tar xzvf trivy.tar.gz
            sudo mv trivy /usr/local/bin/
            trivy --version
        - name: Run Trivy Docker image vulnerability scan
          run: |
            docker build -t ${{ env.DOCKER_IMAGE_NAME }} .
            trivy image ${{ env.DOCKER_IMAGE_NAME }}
        
        - name: Notify Slack - Trivy Scan
          uses: slackapi/slack-github-action@v2.1.0
          if: always()
          with:
            webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
            webhook-type: incoming-webhook
            payload: |
              {
                "text": ":shield: *Trivy Security Scan* - ${{ job.status }}",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":shield: *Trivy Security Scan* - ${{ job.status }}"
                    }
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": "Docker image vulnerability scanning completed"
                      }
                    ]
                  }
                ]
              }

    Snyk-security-test:
      runs-on: ubuntu-latest
      needs: [ sonarQube, unit-test]
      steps:
        - uses: actions/checkout@master
        - name: Run Snyk to check for vulnerabilities
          uses: snyk/actions/node@master
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            command: monitor
      
        - name: Notify Slack - Snyk Scan
          uses: slackapi/slack-github-action@v2.1.0
          if: always()
          with:
            webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
            webhook-type: incoming-webhook
            payload: |
              {
                "text": ":microscope: *Snyk Security Scan* - ${{ job.status }}",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": ":microscope: *Snyk Security Scan* - ${{ job.status }}"
                    }
                  },
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": "Dependency vulnerability scanning completed"
                      }
                    ]
                  }
                ]
              }

    build-and-push-docker-image:
        runs-on: ubuntu-latest
        needs: [trivy-image-security-scan-job, gitleaks-secret-scan-job, Snyk-security-test]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: build docker image
              run: docker build -t ${{ env.DOCKER_IMAGE_NAME}} .

            - name: tag docker image
              run: docker tag ${{ env.DOCKER_IMAGE_NAME}} ${{ env.DOCKER_IMAGE_NAME}}:v${{ github.run_number }}
            
            - name: docker login
              uses: docker/login-action@v2
              with:
                username: ${{ vars.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}

            - name: push versioned docker image
              run: docker push ${{ env.DOCKER_IMAGE_NAME}}:v${{ github.run_number }}
                
            - name: push latest docker image
              run: docker push ${{ env.DOCKER_IMAGE_NAME}}
            
            - name: Notify Slack - Docker Build
              uses: slackapi/slack-github-action@v2.1.0
              if: always()
              with:
                webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
                webhook-type: incoming-webhook
                payload: |
                  {
                    "text": ":whale: *Docker Build & Push* - ${{ job.status }}",
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": ":whale: *Docker Build & Push* - ${{ job.status }}"
                        }
                      },
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "*Image*: ${{ env.DOCKER_IMAGE_NAME}}\n*Version*: v${{ github.run_number }}"
                        }
                      }
                    ]
                  }

    deploy-to-vps:
        runs-on: ubuntu-latest
        needs: [build-and-push-docker-image]
        steps:
            - name: Execute remote SSH commands using password
              uses: appleboy/ssh-action@v1
              with:
                host: ${{ secrets.VPS_HOST }}
                username: ${{ vars.VPS_USERNAME }}
                password: ${{ secrets.VPS_PASSWORD }}
                script: |
                  cd /home/user/devops-script/develop/backend
                  sudo git pull
                  sudo docker pull ${{ env.DOCKER_IMAGE_NAME}}
                  sudo docker compose up -d --force-recreate --remove-orphans
            
            - name: Notify Slack - Deployment
              uses: slackapi/slack-github-action@v2.1.0
              if: always()
              with:
                webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
                webhook-type: incoming-webhook
                payload: |
                  {
                    "text": ":rocket: *Deployment to VPS* - ${{ job.status }}",
                    "blocks": [
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": ":rocket: *Deployment to VPS* - ${{ job.status }}"
                        }
                      },
                      {
                        "type": "section",
                        "text": {
                          "type": "mrkdwn",
                          "text": "*Host*: ${{ secrets.VPS_HOST }}\n*Image*: ${{ env.DOCKER_IMAGE_NAME}}"
                        }
                      }
                    ]
                  }